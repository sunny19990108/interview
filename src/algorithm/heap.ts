// 堆栈关系

// 1、js数据存储
// 值类型的变量数据存储在 栈 中
// 引用类型存储在 堆中

// 二叉树的概念
// 完全二叉树： 平衡的二叉树结构，但不追求完全平衡，优先填充左子
// 满二叉树：平衡的二叉树结构，完全平的衡，左右都填满
// BBST: 平衡二叉搜索树，左子 < 根 < 右子 的完全二叉树

// 堆栈模型
// 堆： 物理上是数组（连续内存，节省空间），逻辑上是二叉树（增删改查快）
// 最大堆：根节点 > 子节点
// 最小堆：根节点 < 子节点
// const heap = [-1, 2, 4, 5, 6, 7, 9. 12] // 忽略第 0 个节点
// 节点关系
// 父节点 parent = Math.floor(i / 2)
// 左子 left = 2i
// 右子 right = 2i + 1

// 堆 VS BST
// 因为 堆 的概念比 BST 是要宽松的，堆是 父节点大于或小于子节点，BST 是严格的左子 < 根 < 右子
// 所以 堆的增删 比 BST 快，维持平衡更快，但查询比 BST 慢
// 但整体时间复杂度都在 O(logn) 都是树的高度


// 堆的应用： 堆栈模型
// 堆的数据都是在栈中引用，不需要从 root 遍历
// 堆恰巧是数组形式，根据栈的地址，可用 O(1) 找到目标